/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 models\Beach.gltf --output output\Beach.js --transform 
Files: models\Beach.gltf [3.17MB] > E:\Downloads\men\output\Beach-transformed.glb [760.22KB] (76%)
*/

import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'

const link = `${process.env.NEXT_PUBLIC_CDN}games/Assets/Quaternius/men/Beach-transformed.glb`

export function Model(props) {
  const group = React.useRef()
  const { scene, animations } = useGLTF(link)
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)

  const { previewConfig } = props
  
  useEffect(() => {

    // Play the requested action (or Idle). If `startOffset` is provided it will set
    // the action's time so multiple instances can be out-of-sync.
    if (!actions) return;

    const actionName = props.action || 'Idle'
    const act = actions[actionName]
    if (act) {
      if (typeof props.startOffset === 'number') {
        // clamp to [0, duration) if duration available
        const duration = act.getClip ? (act.getClip().duration || 0) : (act._clip ? act._clip.duration : 0)
        if (duration > 0) {
          act.time = Math.max(0, Math.min(props.startOffset, duration - 0.0001))
        } else {
          act.time = props.startOffset
        }
      }
      act.play()
    }

  }, [actions, props.action, props.startOffset])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="CharacterArmature">
          <primitive object={nodes.Root} />
        </group>
        <group name="Beach_Body">
          <skinnedMesh name="Cube070" geometry={nodes.Cube070.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube070.skeleton} />
          <skinnedMesh name="Cube070_1" geometry={nodes.Cube070_1.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube070_1.skeleton} />
        </group>
        <group name="Beach_Feet">
          <skinnedMesh name="Cube017" geometry={nodes.Cube017.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube017.skeleton} />
          <skinnedMesh name="Cube017_1" geometry={nodes.Cube017_1.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube017_1.skeleton} />
        </group>
        <group name="Beach_Head">
          <skinnedMesh name="Cube016" geometry={nodes.Cube016.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube016.skeleton} />
          <skinnedMesh name="Cube016_1" geometry={nodes.Cube016_1.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube016_1.skeleton} />
          <skinnedMesh name="Cube016_2" geometry={nodes.Cube016_2.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube016_2.skeleton} />
          <skinnedMesh name="Cube016_3" geometry={nodes.Cube016_3.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube016_3.skeleton} />
          <skinnedMesh name="Cube016_4" geometry={nodes.Cube016_4.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube016_4.skeleton} />
        </group>
        <group name="Beach_Legs">
          <skinnedMesh name="Cube022" geometry={nodes.Cube022.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube022.skeleton} />
          <skinnedMesh name="Cube022_1" geometry={nodes.Cube022_1.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube022_1.skeleton} />
          <skinnedMesh name="Cube022_2" geometry={nodes.Cube022_2.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Cube022_2.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(link)